// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Owner {
  id            String     @id @default(uuid())
  walletAddress String     @unique
  user          User       @relation(fields: [userId], references: [id])
  userId        String     @unique
  nftData       NFT[]
  Activity      Activity[]
}

model User {
  id            String       @id @default(uuid())
  status        STATUS       @default(ACTIVE) //HAVE TO add
  walletAddress String       @unique
  type          TYPE         @default(USER)
  userName      String       @default("usernamed")
  bannerImage   String       @default("https://res.cloudinary.com/dtrrkeb4a/image/upload/v1663911221/Exclusive/Profile/303-3034192_default-banner-banner-jpg_vgzocd.jpg")
  profileImage  String       @default("https://res.cloudinary.com/dtrrkeb4a/image/upload/v1663911221/Exclusive/Profile/303-3034192_default-banner-banner-jpg_vgzocd.jpg")
  owner         Owner?
  reporter      Report[]
  Collection    Collection[]
  bidding       Bidding[]
  Activity      Activity[]
}

model Report {
  id         String      @id @default(uuid())
  reportedId String
  reportType REPORT_TYPE
  reporter   User        @relation(fields: [reporterId], references: [id])
  reporterId String
  reason     String
  DateTime   DateTime    @default(now())
  STATUS     STATUS
}

model Collection {
  id                    String         @id @default(uuid())
  status                STATUS         @default(ACTIVE) //HAVE TO add
  creator               User           @relation(fields: [creatorId], references: [id])
  creatorId             String
  collectionAddress     String         @unique
  collectionDescription String
  collectionName        String         @default("randomCollection")
  collectionCategory    CATERGORY_NAME
  floorPrice            String         @default("0")
  nftCount              Int            @default(0)
  totalVolume           String         @default("0")
  dateTime              DateTime       @default(now())
  logoImage             String         @default("https://res.cloudinary.com/dtrrkeb4a/image/upload/v1664112920/Exclusive/Collection/303-3034192_default-banner-banner-jpg_g9tavj.jpg")
  bannerImage           String         @default("https://res.cloudinary.com/dtrrkeb4a/image/upload/v1664112920/Exclusive/Collection/303-3034192_default-banner-banner-jpg_g9tavj.jpg")
  featuredImage         String         @default("https://res.cloudinary.com/dtrrkeb4a/image/upload/v1664112920/Exclusive/Collection/303-3034192_default-banner-banner-jpg_g9tavj.jpg")
  NFT                   NFT[]
}

model NFT {
  id           String     @id @default(uuid())
  collection   Collection @relation(fields: [collectionId], references: [id])
  collectionId String
  status       STATUS     @default(ACTIVE)
  tokenID      Int
  uri          String     @unique
  timestamp    DateTime   @default(now())
  owner        Owner      @relation(fields: [ownerId], references: [id])
  ownerId      String
  isMinted     Boolean    @default(false)
  activity     Activity[]
}

model Activity {
  id               String      @id @default(uuid())
  nft              NFT         @relation(fields: [nftId], references: [id])
  nftId            String
  buyer            Owner?      @relation(fields: [buyerId], references: [id])
  buyerId          String?
  listingtype      LISTINGTYPE
  endDate          BigInt
  isExpired        Boolean     @default(false)
  sellingprice     String
  buyingprice      String?
  signature        String //HAVE TO add
  listingTimestamp DateTime    @default(now())
  buyingTimestamp  BigInt?
  bidding          Bidding[]
  User             User?       @relation(fields: [userId], references: [id])
  userId           String?
}

model Bidding {
  id          String      @id @default(uuid())
  activity    Activity    @relation(fields: [activityId], references: [id])
  activityId  String
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  listingtype LISTINGTYPE //new field
  price       String
  endDate     BigInt //new field
  timestamp   DateTime    @default(now())
}

enum LISTINGTYPE {
  FIXED_PRICE
  TIMED_AUCTION
  OFFER
}

enum TYPE {
  ADMIN
  SUPER_ADMIN
  USER
}

enum STATUS {
  BLOCKED
  ACTIVE
  REPORTED
}

enum REPORT_TYPE {
  Collection
  USER
  NFT
}

enum CATERGORY_NAME {
  Art
  Collectibles
  Music
  Photography
  Sports
  Cards
  Nature
  Utility
  VirtualWorlds
}
